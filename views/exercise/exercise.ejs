<!DOCTYPE html>
  <meta charset="UTF-8"> <!---->
  <meta name="viewport" content="width=device-width, initial-scale=1.0"> <!---->
  <link href="/stylesheets/style.css" rel="stylesheet">
  <link rel="stylesheet" href="/stylesheets/exercise.css"> <!-- 내 스타일시트 파일 경로 -->
  <%-include('../header.ejs') %>
  <%-include('../menu.ejs') %>

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

  <body>
    <div class="north">
        <div class="north-content">
          <input id="but1" type="button" name="yes" value="&lt" onclick="previousDay()">
          <input id="but2" type="button" name="tody" value="" disabled>
          <input id="but3" type="button" name="tom" value="&gt" onclick="nextDay()">
        </div>
    </div>

    <div class="centers">
      <div class="center1">
        <canvas id="exerciseChart" width="800" height="500"></canvas>
      </div>

      <div class="center2">
        <form id="exerciseForm">
          <div class="real-form">
            <!-- <form id="exerciseForm" onsubmit="addExercise(event)"> -->
            <div class="exercise-date">
              <div class="date-picker-def">날짜</div>
              <input type="date" id="datePicker">
            </div>

            <div class="exercise-select-def">운동 종류
              <div class="exercise-select">
                <input type="text" name="exercise_type" id="exercise_type">
              </div>
            </div>

            <div class="exercise-time">

            <div class="exercise-start-time-def">
              운동 시작 시간
              <div class="exercise-start-time">
                <select name="shour" id="select_shour">
                  <option value="00">00시</option>
                  <option value="01">01시</option>
                  <option value="02">02시</option>
                  <option value="03">03시</option>
                  <option value="04">04시</option>
                  <option value="05">05시</option>
                  <option value="06">06시</option>
                  <option value="07">07시</option>
                  <option value="08">08시</option>
                  <option value="09">09시</option>
                  <option value="10">10시</option>
                  <option value="11">11시</option>
                  <option value="12">12시</option>
                  <option value="13">13시</option>
                  <option value="14">14시</option>
                  <option value="15">15시</option>
                  <option value="16">16시</option>
                  <option value="17">17시</option>
                  <option value="18">18시</option>
                  <option value="19">19시</option>
                  <option value="20">20시</option>
                  <option value="21">21시</option>
                  <option value="22">22시</option>
                  <option value="23">23시</option>
                </select>      
                <select name="sminute" id="select_sminute">
                  <option value="00">00분</option>
                  <option value="10">10분</option>
                  <option value="20">20분</option>
                  <option value="30">30분</option>
                  <option value="40">40분</option>
                  <option value="50">50분</option>
                </select>
              </div>
            </div>

            <div class="exercise-finish-time-def">
              운동 종료 시간
              <div class="exercise-finish-time">
                <select name="fhour" id="select_fhour">
                  <option value="00">00시</option>
                  <option value="01">01시</option>
                  <option value="02">02시</option>
                  <option value="03">03시</option>
                  <option value="04">04시</option>
                  <option value="05">05시</option>
                  <option value="06">06시</option>
                  <option value="07">07시</option>
                  <option value="08">08시</option>
                  <option value="09">09시</option>
                  <option value="10">10시</option>
                  <option value="11">11시</option>
                  <option value="12">12시</option>
                  <option value="13">13시</option>
                  <option value="14">14시</option>
                  <option value="15">15시</option>
                  <option value="16">16시</option>
                  <option value="17">17시</option>
                  <option value="18">18시</option>
                  <option value="19">19시</option>
                  <option value="20">20시</option>
                  <option value="21">21시</option>
                  <option value="22">22시</option>
                  <option value="23">23시</option>
                </select>      
                <select name="fminute" id="select_fminute">
                  <option value="00">00분</option>
                  <option value="10">10분</option>
                  <option value="20">20분</option>
                  <option value="30">30분</option>
                  <option value="40">40분</option>
                  <option value="50">50분</option>
                </select>
              </div>
            </div>
          </div>
            <div class="exercise-score">
              <div class="exercise-score-def">평가 점수</div>
              <div class="progress-container" id="progress-container">
                <div class="progress-bar" id="progress-bar">
                    <div class="handle" id="handle"></div>
                </div>
              </div>
              <p>현재 평가: <span id="rating">0</span> / 5</p>
            </div>

            <div class="exercise-evaluation">
              <textarea name="comments" id="comments" placeholder="오늘의 운동은 어땠나요?"></textarea>
            </div>
          </div>
          <div class="submit">
            <input type="submit" class="tsubmitbut" value="추가"> 
          </div>
        </form>
      <!--input type="submit" class="tsubmitbut" value="최종제출"-->
        
      </div>
    
  </div>


  <div class="result">
    <table class="exercise-head">
      <thead>
        <tr class="list-head" scope="col">
            <th class="th-name">이름</th>
            <th class="th-score">점수</th>
            <th class="th-content">내용</th>
        </tr>
      </thead>
      <tbody id="exercise-body">

      </tbody>
    </table>
  </div>

    <!--추가한거--------------------------------------------------------------------->
    <div class="end">
      <canvas id="newExerciseChart" width="1400" height="600"></canvas>
    </div>
    <!------------------------------------------------------------------------------->
    
    <script> 
    let exerciseChart;
    let token; 
    document.getElementById('exerciseForm').addEventListener('submit', async function(event) {
      event.preventDefault();

      const form = event.target;
      const formData = new FormData(form);
      const shour = formData.get('shour');
      const sminute = formData.get('sminute');
      const fhour = formData.get('fhour');
      const fminute = formData.get('fminute');
      const date = document.getElementById('datePicker').value;
      const star = document.getElementById('rating').textContent;

      const exerciseData = {
            exercise_type: formData.get('exercise_type'),
            shour: shour,
            sminute: sminute,
            fhour: fhour,
            fminute: fminute,
            start_exercise_time: `${shour}:${sminute}`, // 추가했던거
            end_exercise_time: `${fhour}:${fminute}`,   // 추가했던거
            exercise_date: date,
            evaluation: star,
            comments: formData.get('comments')
        };


    try {
        const response = await fetch('exercise/save', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify(exerciseData)
        });

        if (!response.ok) {
            throw new Error('Failed to save exercise');
        }

        const result = await response.json();
        console.log(result);
        alert('운동 기록이 저장되었습니다');
        updateChart(); // 새 데이터를 포함한 차트를 업데이트
        updateNewChart(); // 새로운 차트도 업데이트
        window.location.reload(true);
  
    } catch (error) {
        console.error(error);
    }
  });

  // 추가한거----------------------------------------------------------------------------------
let newExerciseChart;

function updateNewChart(exerciseData) {
  const ctx = document.getElementById('newExerciseChart').getContext('2d');
  
  // 오늘 날짜 계산
  const today = new Date();
  const daysAgo = Array.from({length: 5}, (_, i) => {
    const date = new Date(today);
    date.setDate(today.getDate() - (4 - i));
    return date.toISOString().split('T')[0];
  });

  // 데이터를 날짜별로 그룹화하여 일일 총 운동 시간 계산
  const groupedData = exerciseData.reduce((acc, curr) => {
    const date = curr.exercise_date;
    const start = new Date(`1970-01-01T${curr.start_exercise_time}:00`);
    const end = new Date(`1970-01-01T${curr.end_exercise_time}:00`);
    const duration = (end - start) / (1000 * 60); // 분 단위로 계산

    if (!acc[date]) {
      acc[date] = 0;
    }
    acc[date] += duration;
    return acc;
  }, {});
    // 콘솔 로그로 groupedData 확인-----------------------------------------ok
    console.log('Grouped Data:', groupedData);

  // 날짜와 총 운동 시간을 배열로 변환
  const labels = daysAgo;
  const data = labels.map(date => groupedData[date] || 0);
  // 콘솔 로그로 labels와 data 확인-----------------------------------------ok
  console.log('Labels:', labels);
  console.log('Data:', data);

  if (newExerciseChart) {
    newExerciseChart.destroy();
  }

  newExerciseChart = new Chart(ctx, {
    type: 'bar',
    data: {
      labels: labels,
      datasets: [{
        label: '일일 총 운동 시간 (분)',
        data: data,
        backgroundColor: 'rgba(75, 192, 192, 0.2)',
        borderColor: 'rgba(75, 192, 192, 1)',
        borderWidth: 1
      }]
    },
    options: {
      scales: {
        y: {
          beginAtZero: true,
          title: {
            display: true,
            text: '운동 시간 (분)'
          }
        }
      },
      plugins: {
        legend: {
          display: false
        }
      }
    }
  });
}

// async function fetchExerciseData() {
  async function getRecentExercises() {
  try {
    const response = await fetch('/exercise/recent', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      // 응답이 실패하면 에러를 던집니다.
      const errorText = await response.text();
      throw new Error('Failed to fetch exercise data');
    }

    const data = await response.json();
    // 콘솔 로그로 데이터 확인-----------------------------------not appear
    console.log('Fetched Data:', data);
    updateNewChart(data);
  } catch (error) {
    console.error('Error fetching exercise data:', error.message);
  }
}

// window.addEventListener('load', fetchExerciseData);
window.addEventListener('load', getRecentExercises);

function previousDay() {
  // 이전 날짜로 이동
}

function nextDay() {
  // 다음 날짜로 이동
}

function updateChart() {
  // 차트 업데이트
}
  //-------------------------------------------------------------------------------------------
  
  //운동그래프 띄우기
  function updateChart(exerciseData) {
    const ctx = document.getElementById('exerciseChart').getContext('2d');
    const labels = Array.from({ length: 24 }, (_, i) => `${i}시`);

    const datasets = exerciseData.map(data => {
        const startHour = parseInt(data.start_exercise_time.split(':')[0]);
        const endHour = parseInt(data.end_exercise_time.split(':')[0]);
        const startMinutes = parseInt(data.start_exercise_time.split(':')[1]);
        const endMinutes = parseInt(data.end_exercise_time.split(':')[1]);
        
        // 운동 시간(분) 계산
        const durationMinutes = (endHour * 60 + endMinutes) - (startHour * 60 + startMinutes);
        
        // 각 시간별 운동 시간 배열 생성
        const dataPoints = Array(24).fill(0);
        for (let i = startHour; i <= endHour; i++) {
            if (i === startHour && i === endHour) {
                dataPoints[i] = durationMinutes; // 시작과 종료 시간이 같은 경우
            } else if (i === startHour) {
                dataPoints[i] = 60 - startMinutes; // 시작 시간
            } else if (i === endHour) {
                dataPoints[i] = endMinutes; // 종료 시간
            } else {
                dataPoints[i] = 60; // 그 사이 시간
            }
        }

        return {
            label: data.exercise_type,
            data: dataPoints,
            borderColor: getRandomColor(),
            //backgroundColor: getRandomColor(),
            borderWidth: 7
        };
    });

    if (exerciseChart) {
        exerciseChart.destroy();
    }

    exerciseChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: labels,
            datasets: datasets
        },
        options: {
            scales: {
                x: {
                    title: {
                        display: true,
                        text: '시간',
                        font: {
                          size: 20 // x축 제목 폰트 크기 설정
                        }
                    },
                    ticks: {
                        autoSkip: false,
                        maxRotation: 90,
                        minRotation: 90,
                        font: {
                            size: 18 // x축 눈금 폰트 크기 설정
                        }
                    }
                },
                y: {
                    title: {
                        display: true,
                        text: '운동 시간 (분)',
                        font: {
                          size: 20 // y축 제목 폰트 크기 설정
                        }
                    },
                    beginAtZero: true,
                    min: 0,
                    ticks: {
                        stepSize: 30,
                        font: {
                          size: 18 // y축 제목 폰트 크기 설정
                        }
                    }
                }
            },
            plugins: {
                legend: {
                    labels: {
                        font: {
                            size: 20 // 라벨 폰트 크기 설정
                        }
                    }
                }
            },
        }
    });

  updateNewChart(exerciseData);
}
      // 초기 로딩 시 현재 날짜 표시
      updateCurrentDate();
      // 하루 전 버튼 클릭 시
      function previousDay() {
        changeDate(-1);
        
      }
      // 하루 후 버튼 클릭 시
      function nextDay() {
        changeDate(1);
      }
      // 날짜 변경 함수
      function changeDate(days) {
        const currentDate = document.getElementById('but2').value;
        let newDate = new Date(currentDate);
        newDate.setDate(newDate.getDate() + days);
        document.getElementById('but2').value = formatDate(newDate);

        let newDateString = formatDate(newDate);

        fetch(`/exercise/${newDateString}`, {
            method: 'GET',
            headers: {
              'Authorization': `Bearer ${token}`
            }
        })
        .then(response => response.json())
        .then(data => {
          console.log(data);
          updateChart(data);
          updateList(data);

        })
        .catch(error => console.error('Error fetching exercise entry:', error));
      }

      // 날짜 형식을 YYYY.MM.DD로 변환하는 함수
      function formatDate(date) {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        return `${year}.${month}.${day}`;
      }
      // 현재 날짜를 표시하는 함수
      function updateCurrentDate() {
        const today = new Date();
        document.getElementById('but2').value = formatDate(today);
      }

      document.addEventListener('DOMContentLoaded', function() {
        const today = formatDate(new Date());
        token = localStorage.getItem('token');

        if (token) {
            console.log('Token exists in localSotrage: ', token);
        }
        else {
            console.log('Token does not exist in localStorage');
            window.location.href = '/user/login';
        }
        // 현재 날짜의 운동 기록 가져오기
        fetch(`/exercise/${today}`, {
            method: 'GET',
            headers: {
              'Authorization': `Bearer ${token}`
            }
        })
        .then(response => response.json())
        .then(data => {
          console.log(data);
          updateChart(data);
          updateList(data);
        })
        .catch(error => console.error('Error fetching exercise entry:', error));
        
  // 최근 5일간의 운동 데이터를 가져와서 새로운 차트를 업데이트-----------------------------------------------
    fetch('/exercise/recent', {
        method: 'GET',
        headers: {
            'Authorization': `Bearer ${token}`
        }
    })
    .then(response => response.json())
    .then(getRecentExercises => {
        console.log('Recent Data:', getRecentExercises); // 데이터 구조를 확인합니다
        updateNewChart(getRecentExercises);
    })
     .catch(error => console.error('Error fetching recent exercise data:', error));
    //--------------------------------------------------------------------------------------------------------
      });

  // 차트 초기화
  const ctx = document.getElementById('exerciseChart').getContext('2d');
  exerciseChart = new Chart(ctx, {
    type: 'line',
    data: {
      labels: Array.from({ length: 24 }, (_, i) => `${i}시`), // 0시부터 23시까지 라벨
      datasets: []
    },
    options: {
      scales: {
        x: {
          title: {
            display: true,
            text: '시간',
            font: {
              size: 20 
            }
          },
          ticks: {
            autoSkip: false,
            maxRotation: 90,
            minRotation: 90,
            font: {
              size: 18
            }
          }
        },
        y: {
          title: {
            display: true,
            text: '운동 시간 (분)',
            font: {
              size: 20
            }
          },
          beginAtZero: true,
          min: 0,
          ticks: {
            stepSize: 30, // y축 눈금을 30분 단위로 설정
            font: {
              size: 18
            }
          }
        }
      }
    }
  });
  
  const progressContainer = document.getElementById('progress-container');
  const progressBar = document.getElementById('progress-bar');
  const handle = document.getElementById('handle');
  const ratingDisplay = document.getElementById('rating');
  const updateProgress = (event) => {
      progressBar.classList.add('gradient');
      handle.style.display = 'block';
      const rect = progressContainer.getBoundingClientRect();
      const offsetX = event.clientX - rect.left;
      const width = Math.max(0, Math.min(offsetX, rect.width));
      const percentage = (width / rect.width) * 100;
      const steps = Math.round((percentage / 100) * 5);
      progressBar.style.width = `${(steps / 5) * 100}%`;
      ratingDisplay.textContent = steps;
      localStorage.setItem('userRating', steps);
  };
  handle.addEventListener('mousedown', () => {
      document.addEventListener('mousemove', updateProgress);
  });
  document.addEventListener('mouseup', () => {
      document.removeEventListener('mousemove', updateProgress);
  });
  progressContainer.addEventListener('click', (event) => {
      updateProgress(event);
  });
  const savedRating = localStorage.getItem('userRating');
  if (savedRating !== null) {
      progressBar.classList.add('gradient');
      handle.style.display = 'block';
      const savedPercentage = (savedRating / 5) * 100;
      progressBar.style.width = `${savedPercentage}%`;
      ratingDisplay.textContent = savedRating;
  }

  function getRandomColor() {
    const base = 128; // 파스텔톤을 위해 기본 값 설정
    const variance = 127; // 기본 값에 더해질 범위 설정

    const r = Math.floor(Math.random() * variance + base).toString(16).padStart(2, '0');
    const g = Math.floor(Math.random() * variance + base).toString(16).padStart(2, '0');
    const b = Math.floor(Math.random() * variance + base).toString(16).padStart(2, '0');

    return `#${r}${g}${b}`;
  }

  function updateList(data){
    const tableBody = document.querySelector('#exercise-body');

    while (tableBody.firstChild) {
      tableBody.removeChild(tableBody.firstChild);
    }

    // 데이터 추가
    data.forEach(item => {
      const row = document.createElement('tr');

      const nameCell = document.createElement('td');
      nameCell.textContent = item.exercise_type;
      row.appendChild(nameCell);

      const scoreCell = document.createElement('td');
      scoreCell.textContent = item.exercise_rate;
      row.appendChild(scoreCell);

      const commentsCell = document.createElement('td');
      commentsCell.textContent = item.comments;
      row.appendChild(commentsCell);

      tableBody.appendChild(row);
});

  }
    </script>
  </body>
</html> 
